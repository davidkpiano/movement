@function _m-space-MovementKeyframes-distribute(
    $keyframe,
    $index,
    $keyframes
) {
    $length: length($keyframes);

    @if $length == 1 {
        @return _set($keyframe, 'offset', 1);
    }

    $offset: ($index - 1) / ($length - 1);

    @return map-merge($keyframe, (offset: $offset));
}

@function _m-space-MovementKeyframes-to(
    $frame,
    $index,
    $frames
) {
    $length: length($frames);

    @if $length == 1 {
        @return _set($frame, 'offset', 100%);
    }

    $offset: $index / $length;

    @return _set($frame, 'offset', $offset);
}

@function MovementKeyframes(
  $keyframes: (),
  $duration: auto,
  $delay: 0,
  $easing: null,
  $iterations: 1,
  $fill: auto,
  $direction: normal,
  $spacing: 'distribute',
  $offset: 0s,
  $target: #{&}
) {
  $id: _unique-id('keyframes-');

  // DURATION
  @if $duration == auto {
    $duration: _($keyframes, _pluck 'offset', _max);
  }

  @if length($keyframes) > 0 {
    $keyframes: _map($keyframes, _ary(m-keyframe));
  }

  $calculated-keyframes: ();

  @if $spacing == 'distribute' {
    $keyframes: _map($keyframes, _m-space-MovementKeyframes-distribute);


  } @else if $spacing == 'to' {
    $keyframes: _map($keyframes, _m-space-MovementKeyframes-to);
  }

  @each $keyframe in $keyframes {
    $keyframe-offset: _get($keyframe, 'offset');

    @if unit($keyframe-offset) == '%' {
      $keyframe-offset: ($keyframe-offset / 100%) * $duration;
    }

    $keyframe: _set($keyframe, 'offset', $keyframe-offset);

    $calculated-keyframes: append($calculated-keyframes, $keyframe);
  }

  @return (
    id: $id,
    keyframes: $keyframes,
    spacing: $spacing,
    duration: $duration,
    delay: $delay,
    easing: $easing,
    iterations: $iterations,
    fill: $fill,
    direction: $direction,
    offset: 0s,
    target: $target
  );
}

@function m-keyframes($args...) {
  $effect: MovementKeyframes($args...);

  @return $effect;
}

@mixin m-keyframes(
    $keyframes: (),
    $duration: auto,
    $iterations: 1,
    $easing: linear,
    $spacing: 'distribute'
) {
  $prev: $STACK;
  $STACK: () !global;

  $selector: '#{&}';

  @content;

  $effect: m-keyframes(
    $keyframes: _concat($keyframes, $STACK),
    $duration: $duration,
    $target: $selector
  );


  $STACK: $prev !global;

  @include _m-stack($effect);
}

@mixin m-to(
  $keyframes: (),
  $duration: auto,
  $iterations: 1,
  $easing: linear
) {
  @include m-keyframes(
    $keyframes: $keyframes,
    $duration: $duration,
    $iterations: $iterations,
    $easing: $easing,
    $spacing: 'to'
  ) {
    @content;
  }
}



