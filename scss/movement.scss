@import 'api/module';

* {
  position: relative;
}

.foo {
  height: 1rem;
  width: 1rem;
  background: red;
}

body:hover {
  @include m-sequence {
    .foo {
      @include m-keyframes((left: 0) (top: 0), 1s);
      @include m-to((left: 10px, top: 10px) (left: 100px), 1s);
    }
  }
}

$KEYFRAMES: () !global;
$NODES: () !global;

@function traverse($effect: (effects: $STACK, offset: 0s)) {
  @if map-has-key($effect, 'effects') {
    $effects: _get($effect, 'effects');
    $offset: _get($effect, 'offset');

    $effects: _($effects,
      _map (_modify 'offset' (_add $offset)),
      _map _ary(traverse));
  } @else if map-has-key($effect, 'keyframes') {
    $keyframes: _get($effect, 'keyframes');
    $offset: _get($effect, 'offset');

    $keyframes: _($keyframes,
      _map (_modify 'offset' (_add $offset)),
      _map (_set 'target' _get($effect, 'target')));

    $KEYFRAMES: _concat($KEYFRAMES, $keyframes) !global;
  }

  @return $effect;
}


$_: traverse();
@debug _map(_map($KEYFRAMES, _ (_get 'target')), length);

@each $keyframe in $KEYFRAMES {
  @each $selector in _get($keyframe, 'target') {
    @each $property, $value in _get($keyframe, 'declarations') {
      $node: MovementNode(
        $target: nth($selector, 1),
        $offset: _get($keyframe, 'offset'),
        $duration: null,
        $property: $property,
        $value: $value
      );

      $NODES: append($NODES, $node) !global;
    }
  }
}

@function m-split-target($node, $args...) {
  $selectors: _get($node, 'target'); // selector list
  @debug $node, $selectors, length($selectors);
  $result: ();

  @each $selector in $selectors {
    $result: append($result, map-merge($node, ('target': $selector)));
  }

  @return $result;
}

$NODES: _($NODES,
  _map m-split-target,
  _flatten,
  _group-by 'target');

@each $target, $nodes in $NODES {
  $animation-name: _unique-id();
  $total-duration: _($nodes, _last, _get 'offset');

  #{$target} {
    animation-name: unquote($animation-name);
    animation-duration: $total-duration;
  }

  @keyframes #{$animation-name} {
    @each $node in $nodes {
      #{percentage(_get($node, 'offset') / $total-duration)} {
        #{_get($node, 'property')}: _get($node, 'value');
      }
    }
  }
}
