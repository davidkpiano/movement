
$timeline: () !global;

@mixin _m-timeline() {
    $rendered-timeline: ();
    $rendered-effects: ();

    $target-effect-map: _group-by($timeline, 'target');

    @each $target, $effects in $target-effect-map {
        $effects: _m-effects-by-prop($effects);
    }

    @each $effect in $rendered-effects {
        $target: _get($effect, 'target');

        $animation: (
            -webkit-animation-name: _get($effect, 'name'),
            -webkit-animation-duration: _get($effect, 'duration'),
            -webkit-animation-delay: _get($effect, 'delay') + _get($effect, 'offset-start'),
            -webkit-animation-iteration-count: _get($effect, 'iterations'),
            -webkit-animation-timing-function: _get($effect, 'easing'),
            -webkit-animation-fill-mode: forwards
        );

        $rendered-timeline: append($rendered-timeline, ($target: $animation));

        $name: _get($effect, 'name');
        $keyframes: _get($effect, 'frames');
        $duration: _get($effect, 'duration');

        @-webkit-keyframes #{$name} {
            @each $keyframe in $keyframes {
                $offset: percentage(_get($keyframe, 'offset') / $duration);
                $declarations: _get($keyframe, 'declarations');

                #{$offset} {
                    @include _declare($declarations);
                }
            }
        }
    }

    

    $timeline: $rendered-timeline !global;
}

@function _m-effects-by-prop($effects) {
    $rendered-effects: ();

    $prop-map: ();

    $index: 1;
    @while $index <= length($effects) {
        $effect: nth($effects, $index);
        $prop-keyframes-map: ();

        $props: _($effect,
            _get 'frames',
            _pluck 'declarations',
            _map map-keys,
            _flatten,
            _uniq);

        $keyframes: _get($effect, 'frames');

        @each $prop in $props {
            @if not map-has-key($prop-map, $prop) {
                $prop-map: _set($prop-map, $prop, ());
            }

            $rendered-keyframes: ();

            @each $keyframe in $keyframes {
                $value: _get($keyframe, 'declarations' $prop);

                @if $value {                
                    $declarations: ($prop: $value);

                    $keyframe: _set($keyframe, 'declarations', $declarations);

                    $rendered-keyframes: append($rendered-keyframes, $keyframe);
                }
            }

            $rendered-effect: _set($effect, 'frames', $rendered-keyframes);

            $prop-map: _set($prop-map, $prop, append(_get($prop-map, $prop), $rendered-effect));
        }

        $index: $index + 1;
    }

    @return $rendered-effects;
}

@function _m-set-easings($effect) {
    $easing: _get($effect, 'easing');
    $keyframes: _get($effect, 'frames');

    $keyframes: _map($keyframes, _defaults (easing: $easing));

    @return _set($effect, 'frames', $keyframes);
}

