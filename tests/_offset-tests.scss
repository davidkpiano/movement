

@include test-module('offset (mode: none)') {
    $effect: m-keyframe-effect('', (), 2s);

    @include test('should set offset of effect via delay property') {
        $actual: _m-set-offset($effect, 'none');

        @include assert-equal(_get($actual, 'calculated' 'delay'), 0s);

        // Give effect 1s delay
        $actual-effect: _set($effect, 'options' 'delay', 1s);
        $actual: _m-set-offset($actual-effect, 'none');

        @include assert-equal(_get($actual, 'calculated' 'delay'), 1s);

        // Give 1s-delay effect 2s offset-start
        $actual-effect: _set($actual-effect, 'options' 'offset-start', 2s);
        $actual: _m-set-offset($actual-effect, 'none');

        @include assert-equal(_get($actual, 'calculated' 'delay'), 3s);
    }
}

@include test-module('offset (mode: both)') {
    $parent-effect: m-sequence-effect(null, (), 4s);
    $parent-effect: _set($parent-effect, options, (offset-start: 1s, offset-end: 2s));
    $parent-effect: _m-register-effect($parent-effect);

    $child-effect: m-keyframe-effect(null, (left: 100px) (left: 200px), 1s);
    $child-effect: _set($child-effect, 'parent', _get($parent-effect, 'id'));

    @include test('should set keyframe offsets relative to start and end offsets') {
        $actual: _m-set-offset($child-effect, $mode: 'both');
        $expected-offsets: (25%, 50%);

        @each $index, $keyframe in __to-map(_get($actual, 'frames')) {
            @include assert-equal(_get($keyframe, 'offset'), nth($expected-offsets, $index));
        }
    }
}

@include test-module('_m-offset-sequence') {
    $e-1: m-keyframe-effect(null, (), 1s);
    $e-2: m-keyframe-effect(null, (), 2s);
    $e-3: m-keyframe-effect(null, (), 3s);

    $effects: ($e-1, $e-2, $e-3);

    @include test('should add the proper offset-start and offset-end to each effect') {
        $effects: _m-offset-sequence($effects, 6s);

        $expected-start-offsets: (0s, 1s, 3s);
        $expected-end-offsets: (5s, 3s, 0s);

        $index: 1;
        @while $index <= length($effects) {
            $effect: nth($effects, $index);

            @include assert-equal(_get($effect, 'options' 'offset-start'), nth($expected-start-offsets, $index));
            @include assert-equal(_get($effect, 'options' 'offset-end'), nth($expected-end-offsets, $index));


            $index: $index + 1;
        }
    }

    @include test('should truncate effects overlapping past duration of parent') {
        $effects: _m-offset-sequence($effects, 4s);

        $expected-start-offsets: (0s, 1s, 3s);
        $expected-end-offsets: (3s, 1s, 0s);
        $expected-durations: (1s, 2s, 1s);

        $index: 1;
        @while $index <= length($effects) {
            $effect: nth($effects, $index);

            @include assert-equal(_get($effect, 'options' 'offset-start'), nth($expected-start-offsets, $index));
            @include assert-equal(_get($effect, 'options' 'offset-end'), nth($expected-end-offsets, $index));
            @include assert-equal(_get($effect, 'options' 'duration'), nth($expected-durations, $index));

            $index: $index + 1;
        }
    }

    @include test('should work with a sequence duration of auto') {
        $e-1: m-keyframe-effect(null, (), 1s);
        $e-2: m-keyframe-effect(null, (), 2s);
        $e-3: m-keyframe-effect(null, (), 3s);

        $effects: ($e-1, $e-2, $e-3);

        $effects: _m-offset-sequence($effects, 'auto');

        $expected-start-offsets: (0s, 1s, 3s);
        $expected-end-offsets: (5s, 3s, 0s);

        $index: 1;
        @while $index <= length($effects) {
            $effect: nth($effects, $index);

            @include assert-equal(_get($effect, 'options' 'offset-start'), nth($expected-start-offsets, $index));
            @include assert-equal(_get($effect, 'options' 'offset-end'), nth($expected-end-offsets, $index));


            $index: $index + 1;
        }
    }
}