

@function _m-iterate-SequenceEffect($effect, $iterations) {
    $effect-iterations: _get($effect, 'iterations');

    @if $effect-iterations == 'infinite'
        or $effect-iterations > 1 {
        $calculated-effects: ();
        
        @each $child-effect in _get($effect, 'effects') {
            $child-effect-iterations: _get($child-effect, 'iterations');

            @if $child-effect-iterations == 'infinite' {
                @error 'Child effect can not have infinite iterations inside a parent effect with more than one (#{$effect-iterations}) iterations.';
            }

            @for $index from 1 through $child-effect-iterations {
                $child-effect: _m-set($child-effect, 'iterations', 1);
                $calculated-effects: append($calculated-effects, $child-effect);
            }
        }

        $effect: _m-set($effect, 'effects', $calculated-effects);
    }
    
    @return $effect;
}

@function _m-iterate-StaggerEffect($effect, $iterations) {
    @return _m-iterate-GroupEffect($effect, $iterations);
}

@function _m-iterate-GroupEffect($effect, $iterations) {
    $calculated-effects: ();

    @each $child-effect in _get($effect, 'effects') {
        $iterated-effects: ();
        $child-effect-iterations: _get($child-effect, 'iterations');
        $child-effect: _set($child-effect, 'iterations', 1);

        @for $index from 1 through $child-effect-iterations {
            $iterated-effects: append($iterated-effects, $child-effect);
        }

        $sequence-effect: m-sequence-effect(_get($effect, 'target'), $iterated-effects);

        $sequence-effect: _m-timing($sequence-effect);

        $calculated-effects: append($calculated-effects, $sequence-effect);
    }

    $effect: _m-set($effect, 'effects', $calculated-effects);

    @return $effect;
}

@function _m-iterate($effect) {
    $type: _get($effect, '_type');
    $iterations: _get($effect, 'iterations');

    @return call('_m-iterate-#{$type}', $effect, $iterations);
}