
@import '../bower_components/SassyLists/dist/_SassyLists';

$_nodes: ();

$_current-node: ();

// DEFAULTS
$_animation-timing-defaults: (
    duration: 1000ms
);

$_defaults-map: (
    timing: $_animation-timing-defaults
);

@function pop($list) {
    @return sl-remove-nth($list, 1);
}

@function get($map, $properties) {
    $map: map-get($map, nth($properties, 1));
    $properties: pop($properties);

    @if not $map {
        @return null;
    }

    @if length($properties) == 0 {
        @return $map;
    }

    @return get($map, $properties);
}

@function set($map, $properties, $value) {
    $property: nth($properties, 1);
    $properties: pop($properties);
    $child-map: map-get($map, $property);

    @if length($properties) == 0 {
        @return map-merge($map, ($property: $value));
    }

    @return map-merge($map, ($property: set($child-map, $properties, $value)));
}

@function node-get($properties) {
    @return get($_current-node, $properties);
}

@mixin node-set($properties, $value) {
    $_current-node: set($_current-node, $properties, $value) !global;
}

@mixin nodes-set($id, $properties, $value) {
    $_nodes: set($_nodes, sl-prepend($properties, $id), $value) !global;
}

@mixin node-push($properties, $value) {
    $value: append(node-get($properties), $value);

    @include node-set($properties, $value);
}

@function defaults($group, $key) {
    $group-defaults: map-get($_defaults-map, $group);

    @return map-get($group-defaults, $key);
}

@function new($type, $params, $extends: false) {
    $instance-meta: (
        _type: $type,
        _extends: $extends
    );

    $instance: ();

    @if $extends {
        $instance: map-merge($instance, new($extends, $params));
    }

    $instance: map-merge($instance, call($type, $params...));

    $instance: map-merge($instance, $instance-meta);

    @return $instance;
}

@function mm-node-get($key) {
    @return map-get($_current-node, $key);
}

@mixin mm-node-set($key, $value) {
    $_current-node: map-merge($_current-node, ($key: $value)) !global;
}

@mixin mm-nodes-push($node) {
    $id: map-get($node, id);
    $_nodes: map-merge($_nodes, ($id: $node)) !global;
}

@mixin mm-node-scope($node) {
    @if node-get(id) {
        $node: set($node, parent, node-get(id));
        @include node-push(children, get($node, id));
    }

    $_previous-node: $_current-node !global;

    @include mm-nodes-push($node);

    $_current-node: $node !global;

    @content;

    @if map-get($_previous-node, id) {
        $_current-node: $_previous-node !global;
    }
}

@mixin mm-node-push($key, $value) {
    $current-list: map-get($_current-node, $key);
    $updated-list: append($current-list, $value);

    @include mm-node-set($key, $updated-list);
}

@function mm-nodes-get($id) {
    @return map-get($_nodes, $id);
}

@mixin mm-attach-animation-properties($node) {
    @if not map-get($node, parent) {
        $node-list: ();
        $node-type: map-get($node, _type);

        $animation-name-list: ();
        $animation-duration-list: ();
        $animation-delay-list: ();
        $animation-fill-list: ();
        $animation-iterations-list: ();
        $animation-easing-list: ();
        
        @if $node-type == Animation {
            $node-list: ($node);
        } @else {
            $node-list: map-get($node, children);

            @each $child-node-id in $node-list {
                $child-node: mm-nodes-get($child-node-id);
                $child-node-delay: map-get(map-get($child-node, timing), delay) + map-get(map-get($node, timeline), $child-node-id);

                $animation-name-list: append($animation-name-list, map-get($child-node, name), comma);
                $animation-duration-list: append($animation-duration-list, map-get(map-get($child-node, timing), duration), comma);
                $animation-delay-list: append($animation-delay-list, $child-node-delay, comma);
                $animation-fill-list: append($animation-fill-list, forwards, comma);
                $animation-iterations-list: append($animation-iterations-list, 1, comma);
                $animation-easing-list: append($animation-easing-list, map-get(map-get($child-node, timing), easing), comma);
            }

            @debug $node;
        }

        animation-name: $animation-name-list;
        animation-duration: $animation-duration-list;
        animation-delay: $animation-delay-list;
        animation-fill-mode: $animation-fill-list;
        animation-iteration-count: $animation-iterations-list;
        animation-timing-function: $animation-easing-list;
    }
}

@mixin run() {
    %__temp { @content; }
}