@import 'api/module';

* {
  position: relative;
}

.foo {
  height: 1rem;
  width: 1rem;
  background: red;
}

body:hover {
  @include m-sequence {
    .foo {
      @include m-keyframes((left: 0) (top: 0) (x: 3px, y: 39px), 1s);
      @include m-to((left: 10px, top: 10px) (left: 100px) (y: 38px), 1s);
    }
  }
}

$KEYFRAMES: () !global;
$NODES: () !global;

@function traverse($effect: (effects: $STACK, offset: 0s)) {
  @if map-has-key($effect, 'effects') {
    $effects: _get($effect, 'effects');
    $offset: _get($effect, 'offset');

    $effects: _($effects,
      _map (_modify 'offset' (_add $offset)),
      _map _ary(traverse));
  } @else if map-has-key($effect, 'keyframes') {
    $keyframes: _get($effect, 'keyframes');
    $offset: _get($effect, 'offset');

    $keyframes: _($keyframes,
      _map (_modify 'offset' (_add $offset)),
      _map (_set 'target' _get($effect, 'target')));

    $KEYFRAMES: _concat($KEYFRAMES, $keyframes) !global;
  }

  @return $effect;
}


$_: traverse();

@each $keyframe in $KEYFRAMES {
  @each $selector in _get($keyframe, 'target') {
    @each $property, $value in _get($keyframe, 'declarations') {
      $node: MovementNode(
        $target: nth($selector, 1),
        $offset: _get($keyframe, 'offset'),
        $property: $property,
        $value: $value
      );

      $NODES: append($NODES, $node) !global;
    }
  }
}

@function m-split-target($node, $args...) {
  $selectors: _get($node, 'target'); // selector list
  @debug $node, $selectors, length($selectors);
  $result: ();

  @each $selector in $selectors {
    $result: append($result, map-merge($node, ('target': $selector)));
  }

  @return $result;
}

@function m-map-properties($node, $args...) {
  $property: _get($node, 'property');

  $transform-properties-map: (
    'x': 'translateX',
    'y': 'translateY',
    'z': 'translateZ'
  );

  $transform-properties: _concat(_keys($transform-properties-map),
    'scale',
    'scaleX',
    'scaleY',
    'rotate',
    'skew');

  @if _includes($transform-properties, $property) {
    $property: if(map-has-key($transform-properties-map, $property),
      map-get($transform-properties-map, $property),
      $property);

    $node: _set($node, 'property', $property);
    $node: _set($node, 'transform', true);
  }

  @return $node;
}

@function m-combine-transforms($nodes, $args...) {
  $node-partition: _partition($nodes, 'transform');
  $transform-nodes: nth($node-partition, 1);
  
  $transform-props: _($transform-nodes,
    _pluck 'property',
    _unique,
    _map unquote);

  $transform-nodes-iteratee: _bind(m-normalize-transform-node, ('properties': $transform-props));

  $transform-nodes: _map($transform-nodes, $transform-nodes-iteratee);

  @return $nodes;
}

@function m-normalize-transform-node($node, $index, $nodes) {
  $properties: __this('properties');

  $prop-map: _zip-map($properties, _fill($properties, 0));

  @debug $prop-map;

  @return true;
}

$NODES: _($NODES,
  _map m-split-target,
  _flatten,
  _group-by 'target');

@each $target, $nodes in $NODES {
  $nodes: _($nodes,
    _map m-map-properties,
    m-combine-transforms);

  @debug $nodes;

  // $animation-name: _unique-id();
  // $total-duration: _($nodes, _last, _get 'offset');

  // #{$target} {
  //   animation-name: unquote($animation-name);
  //   animation-duration: $total-duration;
  // }

  // @keyframes #{$animation-name} {
  //   @each $node in $nodes {
  //     #{percentage(_get($node, 'offset') / $total-duration)} {
  //       #{_get($node, 'property')}: _get($node, 'value');
  //     }
  //   }
  // }
}
