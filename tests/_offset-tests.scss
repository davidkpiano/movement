

@include test-module('_m-offset-KeyframeEffect') {
    $keyframes: (left: 1, offset: 0%) (left: 2, offset: 50%) (left: 3, offset: 100%);
    $e-1: m-keyframe-effect(null, (), 1s);
    $e-2: m-keyframe-effect(null, (), 2s);
    $e-3: m-keyframe-effect(null, $keyframes, 3s);

    $effect: m-sequence-effect(null, ($e-1, $e-2, $e-3), 6s);
    $effect: _m-offset-SequenceEffect($effect);

    @include test('(continuous) should set proper delay for child effects of SequenceEffect') {
        $expected-delays: 0s 1s 3s;
        $index: 1;

        @each $child-effect in _get($effect, 'effects') {
            $child-effect: _m-offset-KeyframeEffect($child-effect, 'continuous');
            $actual: _get($child-effect, 'calculated' 'delay');
            $expected: nth($expected-delays, $index);

            @include assert-equal($actual, $expected);

            $index: $index + 1;
        }
    }

    @include test('(continuous) should set proper durations for child effects of SequenceEffect') {
        $expected-duration: 6s;

        @each $child-effect in _get($effect, 'effects') {
            $child-effect: _m-offset-KeyframeEffect($child-effect, 'continuous');
            $actual: _get($child-effect, 'calculated' 'duration');
            $expected: $expected-duration;

            @include assert-equal($actual, $expected);
        }
    }

    @include test('(continuous) should set proper relative offsets for keyframes of child effects of SequenceEffect') {
        $expected-offsets: (0%, 25%, 50%);
        $index: 1;

        $child-effect: nth(_get($effect, 'effects'), 3);

        $child-effect: _m-offset-KeyframeEffect($child-effect, 'continuous');

        @each $keyframe in _get($child-effect, 'frames') {
            $actual-offset: _get($keyframe, 'offset');
            $expected-offset: nth($expected-offsets, $index);

            @include assert-equal($actual-offset, $expected-offset);

            $index: $index + 1;
        }
    }

    @include test('(terminal) should set proper delay for child effects of SequenceEffect') {
        $expected-delays: 0s 1s 3s;
        $index: 1;

        @each $child-effect in _get($effect, 'effects') {
            $child-effect: _m-offset-KeyframeEffect($child-effect, 'terminal');
            $actual: _get($child-effect, 'calculated' 'delay');
            $expected: nth($expected-delays, $index);

            @include assert-equal($actual, $expected);

            $index: $index + 1;
        }
    }

    @include test('(terminal) should set proper durations for child effects of SequenceEffect') {
        $expected-durations: 6s 5s 3s;
        $index: 1;

        @each $child-effect in _get($effect, 'effects') {
            $child-effect: _m-offset-KeyframeEffect($child-effect, 'terminal');
            $actual: _get($child-effect, 'calculated' 'duration');
            $expected: nth($expected-durations, $index);

            @include assert-equal($actual, $expected);

            $index: $index + 1;
        }
    }

    @include test('(terminal) should set proper relative offsets for keyframes of child effects of SequenceEffect') {
        $expected-offsets: (0%, 50%, 100%);
        $index: 1;

        $child-effect: nth(_get($effect, 'effects'), 3);

        $child-effect: _m-offset-KeyframeEffect($child-effect, 'terminal');

        @each $keyframe in _get($child-effect, 'frames') {
            $actual-offset: _get($keyframe, 'offset');
            $expected-offset: nth($expected-offsets, $index);

            @include assert-equal($actual-offset, $expected-offset);

            $index: $index + 1;
        }
    }
}

@include test-module('_m-offset-SequenceEffect') {
    $e-1: m-keyframe-effect(null, (), 1s);
    $e-2: m-keyframe-effect(null, (), 2s);
    $e-3: m-keyframe-effect(null, (), 3s);

    $effect: m-sequence-effect(null, ($e-1, $e-2, $e-3), 6s);

    $e-4: m-keyframe-effect(null, (), 1s);
    $e-5: m-keyframe-effect(null, (), (duration: 2s, iterations: 2));
    $e-6: m-keyframe-effect(null, (), 3s);

    $effect-with-child-iterations: m-sequence-effect(null, ($e-4, $e-5, $e-6), 8s);

    @include test('should add the proper offset-start and offset-end to each effect') {
        $effects: _get(_m-offset-SequenceEffect($effect), 'effects');

        $expected-start-offsets: (0s, 1s, 3s);
        $expected-end-offsets: (5s, 3s, 0s);

        $index: 1;
        @while $index <= length($effects) {
            $child-effect: nth($effects, $index);

            @include assert-equal(_get($child-effect, 'options' 'offset-start'), nth($expected-start-offsets, $index));
            @include assert-equal(_get($child-effect, 'options' 'offset-end'), nth($expected-end-offsets, $index));


            $index: $index + 1;
        }

    }

    @include test('should add the proper offset-start and offset-end to each effect and respect child effect(s) with multiple iterations') {
        $effects: _get(_m-offset-SequenceEffect($effect-with-child-iterations), 'effects');

        $expected-start-offsets: (0s, 1s, 5s);
        $expected-end-offsets: (7s, 3s, 0s);

        $index: 1;
        @while $index <= length($effects) {
            $child-effect: nth($effects, $index);

            @include assert-equal(_get($child-effect, 'options' 'offset-start'), nth($expected-start-offsets, $index));
            @include assert-equal(_get($child-effect, 'options' 'offset-end'), nth($expected-end-offsets, $index));


            $index: $index + 1;
        }
    }

    @include test('should truncate effects overlapping past duration of parent') {
        $effect: m-sequence-effect(null, ($e-1, $e-2, $e-3), 4s);
        $effects: _get(_m-offset-SequenceEffect($effect), 'effects');

        $expected-start-offsets: (0s, 1s, 3s);
        $expected-end-offsets: (3s, 1s, 0s);
        $expected-durations: (1s, 2s, 1s);

        $index: 1;
        @while $index <= length($effects) {
            $child-effect: nth($effects, $index);

            @include assert-equal(_get($child-effect, 'options' 'offset-start'), nth($expected-start-offsets, $index));
            @include assert-equal(_get($child-effect, 'options' 'offset-end'), nth($expected-end-offsets, $index));
            @include assert-equal(_get($child-effect, 'options' 'duration'), nth($expected-durations, $index));

            $index: $index + 1;
        }
    }

    @include test('should work with a sequence duration of auto') {
        $e-1: m-keyframe-effect(null, (), 1s);
        $e-2: m-keyframe-effect(null, (), 2s);
        $e-3: m-keyframe-effect(null, (), 3s);

        $effect: m-sequence-effect(null, ($e-1, $e-2, $e-3), 'auto');

        $effects: _get(_m-offset-SequenceEffect($effect), 'effects');

        $expected-start-offsets: (0s, 1s, 3s);
        $expected-end-offsets: (5s, 3s, 0s);

        $index: 1;
        @while $index <= length($effects) {
            $child-effect: nth($effects, $index);

            @include assert-equal(_get($child-effect, 'options' 'offset-start'), nth($expected-start-offsets, $index));
            @include assert-equal(_get($child-effect, 'options' 'offset-end'), nth($expected-end-offsets, $index));


            $index: $index + 1;
        }
    }
}