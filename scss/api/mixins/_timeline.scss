
$timeline: () !global;

@mixin _m-timeline() {
    $rendered-timeline: ();
    $rendered-effects: ();

    $target-effect-map: _group-by($timeline, 'target');

    @each $target, $effects in $target-effect-map {
        $calculated-effects: _m-effects-by-prop($effects, $target);

        @each $effect in $calculated-effects {
            $rendered-effects: append($rendered-effects, $effect);
        }
    }

    @each $effect in $rendered-effects {
        $target: _get($effect, 'target');

        $animation: (
            -webkit-animation-name: _get($effect, 'name'),
            -webkit-animation-duration: _get($effect, 'duration'),
            -webkit-animation-delay: _get($effect, 'delay'),
            -webkit-animation-iteration-count: _get($effect, 'iterations'),
            -webkit-animation-timing-function: _get($effect, 'easing'),
            -webkit-animation-fill-mode: forwards
        );

        $rendered-timeline: append($rendered-timeline, ($target: $animation));

        $name: _get($effect, 'name');
        $keyframes: _get($effect, 'frames');
        $duration: _get($effect, 'duration');
        $delay: _get($effect, 'delay');

        @-webkit-keyframes #{$name} {
            @each $keyframe in $keyframes {
                $offset: percentage((_get($keyframe, 'offset') - $delay) / $duration);
                $declarations: _get($keyframe, 'declarations');

                #{$offset} {
                    @include _declare($declarations);
                }
            }
        }
    }

    $timeline: $rendered-timeline !global;
}

@function _m-effects-by-prop($effects, $target) {
    $rendered-effects: ();

    $prop-map: ();

    $index: 1;
    @while $index <= length($effects) {
        $effect: nth($effects, $index);
        $prop-keyframes-map: ();

        $props: _($effect,
            _get 'frames',
            _pluck 'declarations',
            _map map-keys,
            _flatten,
            _uniq);

        $keyframes: _get($effect, 'frames');

        @each $prop in $props {
            @if not map-has-key($prop-map, $prop) {
                $prop-map: _set($prop-map, $prop, ());
            }

            $rendered-keyframes: ();

            @each $keyframe in $keyframes {
                $value: _get($keyframe, 'declarations' $prop);

                @if $value {                
                    $declarations: ($prop: $value);

                    $keyframe: _set($keyframe, 'declarations', $declarations);

                    $rendered-keyframes: append($rendered-keyframes, $keyframe);
                }
            }

            $rendered-effect: _set($effect, 'frames', $rendered-keyframes);

            $prop-map: _set($prop-map, $prop, append(_get($prop-map, $prop), $rendered-effect));
        }

        $index: $index + 1;
    }

    $EPSILON: 0.001s;

    @each $prop, $effects in $prop-map {
        $effects: _map($effects, _ary(_m-absolute-offsets));
        $effects: _map($effects, _ary(_m-set-easings));
        $rendered-keyframes: ();
        $rendered-duration: 0s;
        $rendered-delay: 0s;
        $rendered-iterations: 1;

        $index: 1;
        @while $index <= length($effects) {
            $effect: nth($effects, $index);
            $keyframes: _get($effect, 'frames');

            $is-first: $index == 1;
            $is-last: $index == length($effects);

            $last-keyframe: _last($keyframes);

            @if not $is-last {
                $next-effect: nth($effects, $index + 1);

                $next-keyframe: _first(_get($next-effect, 'frames'));

                @if _get($next-keyframe, 'offset') == _get($last-keyframe, 'offset') {
                    $last-keyframe: _set($last-keyframe,
                        'offset',
                        _get($last-keyframe, 'offset') - $EPSILON);

                    $keyframes: set-nth($keyframes, length($keyframes), $last-keyframe);
                } @else if _get($next-effect, 'offset-start') != _get($last-keyframe, 'offset') {
                    $terminal-keyframe: _set($last-keyframe, 'offset', _get($next-effect, 'offset-start'));

                    $keyframes: append($keyframes, $terminal-keyframe);
                }
            }

            @if $is-first {
                $rendered-delay: _get($effect, 'offset-start');
            }

            @if $is-last {
                $rendered-duration:
                    _get($effect, 'offset-start')
                    + _get($effect, 'duration')
                    + _get($effect, 'offset-end');

                @if _get($root-effect, 'iterations') == 1 {
                    $rendered-duration: $rendered-duration - $rendered-delay;
                } @else {
                    $rendered-iterations: _get($root-effect, 'iterations');
                }

                @if _get($last-keyframe, 'offset') != $rendered-duration + $rendered-delay {                
                    $terminal-keyframe: _set($last-keyframe, 'offset', $rendered-duration + $rendered-delay);

                    $keyframes: append($keyframes, $terminal-keyframe);
                }
            }

            @each $keyframe in $keyframes {
                $rendered-keyframes: append($rendered-keyframes, $keyframe);
            }

            $index: $index + 1;
        }

        $rendered-effect: m-keyframe-effect(
            $target: $target,
            $frames: $rendered-keyframes, 
            $duration: $rendered-duration,
            $delay: $rendered-delay,
            $iterations: $rendered-iterations);

        $rendered-effects: append($rendered-effects, $rendered-effect);
    }

    @return $rendered-effects;
}

@function _m-absolute-offsets($effect) {
    $duration: _get($effect, 'duration');
    $offset-start: _get($effect, 'offset-start');
    $offset-end: _get($effect, 'offset-end');
    $total-duration: $duration + $offset-start + $offset-end;

    $rendered-keyframes: ();

    @each $keyframe in _get($effect, 'frames') {
        $keyframe-offset:
            $offset-start
            + ((_get($keyframe, 'offset') / 100%) * $duration);

        $keyframe: _set($keyframe, 'offset', $keyframe-offset);

        $rendered-keyframes: append($rendered-keyframes, $keyframe);
    }

    $effect: _set($effect, 'frames', $rendered-keyframes);

    @return $effect;
}

@function _m-set-easings($effect) {
    $easing: _get($effect, 'easing');
    $keyframes: _get($effect, 'frames');

    $keyframes: _map($keyframes, _defaults (easing: $easing));

    @return _set($effect, 'frames', $keyframes);
}

