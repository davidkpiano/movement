@import 'api/module';

@import 'lib/split-target';
@import 'lib/map-properties';
@import 'lib/set-transform-properties';
@import 'lib/get-default-transform-values';
@import 'lib/set-default-transform-values';
@import 'lib/persist-transform-values';
@import 'lib/parenthesize';
@import 'lib/aggregate-transform-properties';
@import 'lib/concatenate-transform-values';
@import 'lib/combine-transforms';
@import 'lib/calculate-values';



$KEYFRAMES: () !global;

@function traverse($effect: (effects: $STACK, offset: 0s)) {
  @if map-has-key($effect, 'effects') {
    $effects: _get($effect, 'effects');
    $offset: _get($effect, 'offset');

    $effects: _($effects,
      _map (_modify 'offset' (_add $offset)),
      _map _ary(traverse));
  } @else if map-has-key($effect, 'keyframes') {
    $keyframes: _get($effect, 'keyframes');
    $offset: _get($effect, 'offset');

    $keyframes: _($keyframes,
      _map (_modify 'offset' (_add $offset)),
      _map (_set 'easing' _get($effect, 'easing')),
      _map (_set 'target' _get($effect, 'target')));

    $KEYFRAMES: _concat($KEYFRAMES, $keyframes) !global;
  }

  @return $effect;
}

@function m-add-start-node($nodes, $args...) {
  $start-node: nth($nodes, 1);

  @if (_get($start-node, 'offset') != 0s) {
    $start-node: MovementNode(
      $target: _get($start-node, 'target'),
      $offset: 0s,
      $property: null,
      $value: null,
      $easing: step-end);

    $nodes: _concat($start-node, $nodes);
  }

  @return $nodes;
}

@function m-add-end-node($nodes, $args...) {
  $max-offset: __this('max-offset');
  $end-node: nth($nodes, -1);

  @if (_get($end-node, 'offset') < $max-offset) {
    $end-node: _modify($end-node, 'offset', _concat $max-offset);
  }

  @return set-nth($nodes, -1, $end-node);
}

@function m-node-offset-to-percent($node, $args...) {
  $total-duration: __this('total-duration');

  $offsets: _get($node, 'offset');
  $percentage-offsets: ();

  @debug $offsets;

  @each $offset in $offsets {
    $percentage-offsets: append($percentage-offsets,
      percentage($offset / $total-duration));
  }

  @return _set($node, 'offset', $percentage-offsets);
}

@mixin _m-render() {
  $_: traverse();
  $NODES: ();

  @each $keyframe in $KEYFRAMES {
    @each $selector in _get($keyframe, 'target') {
      $declarations-reducer: _bind(m-declarations-reducer, (
        'keyframe': $keyframe,
        'selector': nth($selector, 1)
      ));

      @each $property, $value in _get($keyframe, 'declarations') {
        $node: MovementNode(
          $target: nth($selector, 1),
          $offset: _get($keyframe, 'offset'),
          $property: $property,
          $value: $value,
          $easing: _get($keyframe, 'easing')
        );

        $NODES: append($NODES, $node);
      }
    }
  }

  $max-offset: _max(_pluck($NODES, 'offset'));

  $NODES: _($NODES,
    _map m-split-target,
    _flatten,
    _group-by 'target');

  @each $target, $nodes in $NODES {
    $property-nodes-map: _($nodes,
      _map m-map-properties,
      m-calculate-values,
      m-combine-transforms,
      _group-by 'property',
      _map-values _flow(
        m-add-start-node,
        _bind(m-add-end-node, ('max-offset': $max-offset)))
      );

    $animation-names: ();
    $animation-durations: ();
    $animation-easings: ();

    @each $property, $property-nodes in $property-nodes-map {
      $property-nodes: _map($property-nodes, _bind(m-node-offset-to-percent, ('total-duration': $max-offset)));
      $animation-name: unquote(_unique-id());
      $total-duration: $max-offset;

      $animation-names: append($animation-names, $animation-name);
      $animation-durations: append($animation-durations, $total-duration);

      @keyframes #{$animation-name} {
        @each $node in $property-nodes {
          #{_join(_get($node, 'offset'), ',')} {
            #{_get($node, 'property')}: _get($node, 'value');
            animation-timing-function: _get($node, 'easing');
          }
        }
      }
    }

    #{$target} {
      animation-name: join((), $animation-names, comma);
      animation-duration: join((), $animation-durations, comma);
      animation-fill-mode: join((), _fill($animation-durations, forwards), comma);
    }
  }
}




















