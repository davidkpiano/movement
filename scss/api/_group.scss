
@function _m-offset-sequence-effects($effects, $duration) {
  $calculated-effects: ();

  $previous-duration: 0s;
  $remaining-duration: $duration;

  @each $effect in $effects {
      $child-duration: _get($effect, 'duration');
      $child-iterations: _get($effect, 'iterations');
      $child-total-duration: $child-duration * $child-iterations;

      $duration: min($child-total-duration, $remaining-duration);

      @if $child-total-duration > $remaining-duration + 0.001s {
          @error 'Total duration of child effects exceed duration of sequence effect - #{$child-total-duration} > #{$remaining-duration}';
      }

      $remaining-duration: $remaining-duration - $duration;

      $effect: map-merge($effect,
        ('offset': $previous-duration));

      $previous-duration: $previous-duration + $duration;

      $calculated-effects: append($calculated-effects, $effect);
  }

  @return $calculated-effects;
}


@function MovementGroup(
  $type: 'group',
  $duration: auto,
  $effects: (),
  $delay: 0,
  $easing: linear,
  $iterations: 1,
  $direction: normal,
  $target: &
) {
  $id: _unique-id('#{$type}-');

  // DURATION
  @if $duration == auto {
    @if $type == 'group' {
      $duration: _($effects, _pluck 'duration', _max);
    } @else if $type == 'sequence' {
      $duration: _($effects, _pluck 'duration', _sum);
    }
  }

  // CHILD RELATIVE OFFSETS
  @if $type == 'sequence' {
    $effects: _m-offset-sequence-effects($effects, $duration);
  }

  $effect: (
    id: $id,
    effects: $effects,
    duration: $duration,
    delay: $delay,
    easing: $easing,
    iterations: $iterations,
    direction: $direction,
    offset: 0s,
    type: $type,
    target: $target
  );

  @return $effect;
}


@mixin m-group(
  $duration: auto,
  $iterations: 1
) {
  $prev: $STACK;
  $STACK: () !global;

  @content;

  $effect: MovementGroup(
    $type: 'group',
    $duration: $duration,
    $effects: $STACK,
    $target: &);

  $STACK: $prev !global;

  @include _m-stack($effect);
}

@mixin m-sequence(
  $duration: auto,
  $iterations: 1
) {
  $prev: $STACK;
  $STACK: () !global;

  @content;

  $effect: MovementGroup(
    $type: 'sequence',
    $duration: $duration,
    $effects: $STACK,
    $target: &);

  $STACK: $prev !global;

  @include _m-stack($effect);
}
