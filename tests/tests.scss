@import '../bower_components/true/sass/_true';
@import '../node_modules/sassdash/scss/_sassdash';
@import '../scss/movement';

@import 'offset-tests';

@include test-module('m-keyframe') {
    $single-decl: (left: 100px);
    $multiple-decls: (left: 100px, color: green);
    $single-decl-offset: (left: 100px, offset: 0.1);
    $multiple-decls-offset: (left: 100px, color: green, offset: 0.1);

    $decls-list: $single-decl, $multiple-decls, $single-decl-offset, $multiple-decls-offset;

    @include test('should return a new Keyframe map') {
        @each $decls in $decls-list {
            $keyframe: m-keyframe($decls);

            @include assert-true(_instance-of($keyframe, 'Keyframe'));
        }
    }

    @include test('should default offset to null') {
        @each $decls in $single-decl, $multiple-decls {
            $keyframe: m-keyframe($decls);

            @include assert-equal(_get($keyframe, 'offset'), null);
        }
    }

    @include test('should set offset when present in declarations') {
        @each $decls in $single-decl-offset, $multiple-decls-offset {
            $keyframe: m-keyframe($decls);

            @include assert-equal(_get($keyframe, 'offset'), 0.1);
        }
    }

    @include test('should override offset if explicitly provided in arguments') {
        @each $decls in $single-decl-offset, $multiple-decls-offset {
            $keyframe: m-keyframe($decls, $offset: 0.2);

            @include assert-equal(_get($keyframe, 'offset'), 0.2);
        }
    }

    @include test('should exclude offset from declarations') {
        @each $decls in $single-decl-offset, $multiple-decls-offset {
            $keyframe: m-keyframe($decls);

            @include assert-false(_has(_get($keyframe, 'declarations'), 'offset'));
        }
    }
}

@include test-module('m-keyframes') {
    @include test('should convert a map of keyframe offset-declarations to a list of keyframes') {
        $keyframe-rules: (
            0%: (left: 100px),
            10%: (left: 200px),
            90%: (left: 300px)
        );

        $keyframes: m-keyframes($keyframe-rules);

        @include assert-true(_every($keyframes, _instance-of Keyframe));

        $keys: _keys($keyframe-rules);
        $index: 1;
        
        @each $keyframe in $keyframes {
            @include assert-equal(_get($keyframe, 'offset'), nth($keys, $index));
            $index: $index + 1;
        }
    }
}

@include test-module('m-timing') {
    $default-timing: m-timing();
    $timing-1: m-timing(150ms, 1s);

    @include test('should return a new AnimationEffectTimingProperties map') {
        @each $timing in $default-timing, $timing-1 {
            @include assert-true(_instance-of($timing, 'AnimationEffectTimingProperties'));
        }
    }
}

@include test-module('m-keyframe-effect') {
    $effect: m-keyframe-effect('.foo', (left: 100px), 'bar');

    @include test('should return a new KeyframeEffect map') {
        @include assert-true(_instance-of($effect, 'KeyframeEffect'));

        $empty-effect: m-keyframe-effect();

        @include assert-true(_instance-of($empty-effect, 'KeyframeEffect'));
    }

    @include test('should include KeyframeEffectOptions as options property') {
        $options: _get($effect, 'options');

        @include assert-true(_instance-of($options, 'KeyframeEffectOptions'));
    }

    @include test('options should extend AnimationEffectTimingProperties') {
        $options: _get($effect, 'options');

        @include assert-equal(_get($options, '_extends'), 'AnimationEffectTimingProperties');

        @include assert-true(_has($options, 'duration'));
    }

    @include test('should space frames using "distribute spacing mode" by default') {
        $effect: m-keyframe-effect('.foo', ((left: 100px), (left: 200px)));
        
        $frames: _get($effect, 'frames');

        @include assert-equal(_get($frames, 1 'offset'), 0%);
        @include assert-equal(_get($frames, 2 'offset'), 100%);

        $effect: m-keyframe-effect('.foo', ((left: 100px), (left: 200px), (left: 300px)));

        $frames: _get($effect, 'frames');

        @include assert-equal(_get($frames, 1 'offset'), 0%);
        @include assert-equal(_get($frames, 2 'offset'), 50%);
        @include assert-equal(_get($frames, 3 'offset'), 100%);
    }

    @include test('should set solitary frame using "distribute spacing mode" to offset 100%') {
        $effect: m-keyframe-effect('.foo', (left: 100px), 'bar');
        
        $frames: _get($effect, 'frames');

        @include assert-equal(_get($frames, 1 'offset'), 100%);
    }

    @include test('should set duration in AnimationEffectTimingProperties if $options is a time value') {
        @each $value in 3s, 3ms {
            $effect: m-keyframe-effect('.foo', (), $value);

            @include assert-equal(_get($effect, 'options' 'duration'), $value);

            @include assert-unequal(_get($effect, 'options' 'name'), $value);
        }
    }

    @include test('should treat a single frame as a single-item collection of frames') {
        $effect: m-keyframe-effect('.foo', (left: 100px, top: 100px));

        @include assert-equal(length(_get($effect, 'frames')), 1);
    }
}



@include report();
