
@import '../bower_components/SassyLists/dist/_SassyLists';

$_nodes: ();

$_current-node: ();

// DEFAULTS
$_animation-timing-defaults: (
    duration: 1000ms
);

$_defaults-map: (
    timing: $_animation-timing-defaults
);

@function pop($list) {
    @return sl-remove-nth($list, 1);
}

@function get($map, $properties) {
    $map: map-get($map, nth($properties, 1));
    $properties: pop($properties);

    @if not $map {
        @return null;
    }

    @if length($properties) == 0 {
        @return $map;
    }

    @return get($map, $properties);
}

@function set($map, $properties, $value) {
    $property: nth($properties, 1);
    $properties: pop($properties);
    $child-map: map-get($map, $property);

    @if length($properties) == 0 {
        @return map-merge($map, ($property: $value));
    }

    @return map-merge($map, ($property: set($child-map, $properties, $value)));
}

@function push($map, $properties, $value, $args...) {
    @return set($map, $properties, append(get($map, $properties), $value, $args...));
}

@function node-get($properties) {
    @return get($_current-node, $properties);
}

@mixin node-set($properties, $value) {
    $_current-node: set($_current-node, $properties, $value) !global;

    $_: nodes-set(get($_current-node, id), (), $_current-node);
}

@function nodes-get($id, $properties: ()) {
    @return get($_nodes, sl-prepend($properties, $id));
}

@function nodes-set($id, $properties, $value) {
    $_nodes: set($_nodes, sl-prepend($properties, $id), $value) !global;

    @return true;
}

@mixin node-push($properties, $value) {
    $value: append(node-get($properties), $value);

    @include node-set($properties, $value);
}

@function defaults($group, $key) {
    $group-defaults: map-get($_defaults-map, $group);

    @return map-get($group-defaults, $key);
}

@function new($type, $params, $extends: false) {
    $instance-meta: (
        _type: $type,
        _extends: $extends
    );

    $instance: ();

    @if $extends {
        $instance: map-merge($instance, new($extends, $params));
    }

    $instance: map-merge($instance, call($type, $params...));

    $instance: map-merge($instance, $instance-meta);

    @return $instance;
}

@function mm-node-get($key) {
    @return map-get($_current-node, $key);
}

@mixin mm-node-set($key, $value) {
    $_current-node: map-merge($_current-node, ($key: $value)) !global;
}

@mixin mm-nodes-push($node) {
    $id: map-get($node, id);
    $_nodes: map-merge($_nodes, ($id: $node)) !global;
}

@mixin mm-node-scope($node) {
    @if node-get(id) {
        @include node-push(children, get($node, id));
    }

    $previous-node: $_current-node !global;

    @include mm-nodes-push($node);

    $_current-node: $node !global;

    @content;

    $node: $_current-node;

    @if get($previous-node, id) {
        $_current-node: $previous-node !global;
    }

    @if not get($node, parent) {
        @include mm-attach-animation-properties($node);
    }
}

@mixin mm-node-push($key, $value) {
    $current-list: map-get($_current-node, $key);
    $updated-list: append($current-list, $value);

    @include mm-node-set($key, $updated-list);
}

@function mm-nodes-get($id) {
    @return map-get($_nodes, $id);
}

@mixin adjust-nodes-offsets($node-id, $offset: 0) {
    $node: nodes-get($node-id);
    $node-offset: get($node, timing offset) + $offset;

    $_: nodes-set($node-id, timing liveOffset, $node-offset);

    @if not get($node, _type) == Animation {    
        @each $child-node-id in nodes-get($node-id, children) {
            @include adjust-nodes-offsets($child-node-id, $node-offset);
        }
    }
}

@function timeline($node-id) {
    $node: nodes-get($node-id);
    $timeline: ();

    @if get($node, _type) == Animation {
        @return (
            name: get($node, name),
            target: get($node, target),
            duration: get($node, timing liveDuration),
            delay: get($node, timing delay) + get($node, timing liveOffset),
            fill-mode: forwards,
            iteration-count: 1,
            timing-function: get($node, timing easing),
        );
    }

    @each $child-node-id in get($node, children) {
        $timeline: append($timeline, timeline($child-node-id));
    }

    @return $timeline;
}

@mixin mm-attach-animation-properties($node) {
    $target-map: ();

    $node-id: get($node, id);

    @include adjust-nodes-offsets($node-id);

    $timeline: timeline($node-id);

    @each $timeline-node in $timeline {
        $target-map: push($target-map, get($timeline-node, target), $timeline-node);
    }

    @each $target, $target-nodes in $target-map {
        $animation-properties: (
            name: (),
            duration: (),
            delay: (),
            fill-mode: (),
            iteration-count: (),
            timing-function: (),
        );

        @each $target-node in $target-nodes {
            @each $animation-property-key, $animation-property-value in $target-node {
                $animation-properties: push(
                    $animation-properties,
                    $animation-property-key,
                    $animation-property-value,
                    $separator: comma
                );
            }
        }

        @at-root #{$target} {
            @each $animation-property-key, $animation-property-value in $animation-properties {
                @debug $animation-property-key, $animation-property-value;
                animation-#{$animation-property-key}: $animation-property-value;
            }
        }
    }
}

@mixin run() {
    %__temp__ { @content; }
}