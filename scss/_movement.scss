@import 'api/module';

@include m-sequence {
  .dot:nth-child(1) {
    @include m-effect((x:0)(x: 100%), 1s);
  }
  .dot:nth-child(2) {
    @include m-effect((x:0)(x: 100%), 1s);
  }
  .dot:nth-child(3) {
    @include m-effect((x:0)(x: 100%), 1s);
  }
}

$KEYFRAMES: () !global;

@function traverse($effect: (effects: $STACK, offset: 0s)) {
  @if map-has-key($effect, 'effects') {
    $effects: _get($effect, 'effects');
    $offset: _get($effect, 'offset');

    $effects: _($effects,
      _map (_modify 'offset' (_add $offset)),
      _map _ary(traverse));
  } @else if map-has-key($effect, 'keyframes') {
    $keyframes: _get($effect, 'keyframes');
    $offset: _get($effect, 'offset');

    $keyframes: _($keyframes,
      _map (_modify 'offset' (_add $offset)),
      _map (_set 'easing' _get($effect, 'easing')),
      _map (_set 'target' _get($effect, 'target')));

    $KEYFRAMES: _concat($KEYFRAMES, $keyframes) !global;
  }

  @return $effect;
}



@mixin _m-render() {
  $_: traverse();
  $NODES: ();

  @each $keyframe in $KEYFRAMES {
    @each $selector in _get($keyframe, 'target') {
      @each $property, $value in _get($keyframe, 'declarations') {
        $node: MovementNode(
          $target: nth($selector, 1),
          $offset: _get($keyframe, 'offset'),
          $property: $property,
          $value: $value,
          $easing: _get($keyframe, 'easing')
        );

        $NODES: append($NODES, $node);
      }
    }
  }

  $max-offset: _max(_pluck($NODES, 'offset'));

  $NODES: _($NODES,
    _map m-split-target,
    _flatten,
    _group-by 'target');

  @each $target, $nodes in $NODES {
    $nodes: _($nodes,
      _map m-map-properties,
      m-calculate-values,
      m-combine-transforms,
      _group-by 'property');

    $animation-names: ();
    $animation-durations: ();
    $animation-easings: ();

    @each $property, $property-nodes in $nodes {
      $animation-name: unquote(_unique-id());
      $total-duration: $max-offset;

      $animation-names: append($animation-names, $animation-name);
      $animation-durations: append($animation-durations, $total-duration);

      // Duplicate last node
      @if (_($property-nodes, _last, _get 'offset') < $max-offset) {
        $property-nodes: append($property-nodes, _($property-nodes, _last, _set 'offset' $max-offset));
      }

      @keyframes #{$animation-name} {
        @each $node in $property-nodes {
          #{percentage(_get($node, 'offset') / $total-duration)} {
            #{_get($node, 'property')}: _get($node, 'value');
            animation-timing-function: _get($node, 'easing');
          }
        }
      }
    }

    #{$target} {
      animation-name: join((), $animation-names, comma);
      animation-duration: join((), $animation-durations, comma);
      animation-fill-mode: join((), _fill($animation-durations, forwards), comma);
    }
  }
}


@function m-split-target($node, $args...) {
  $selectors: _get($node, 'target'); // selector list
  @debug $node, $selectors, length($selectors);
  $result: ();

  @each $selector in $selectors {
    $result: append($result, map-merge($node, ('target': $selector)));
  }

  @return $result;
}

@function m-map-properties($node, $args...) {
  $property: _get($node, 'property');

  $transform-properties-map: (
    'x': 'translateX',
    'y': 'translateY',
    'z': 'translateZ',
    'xy': 'translate',
    '2d': 'translate',
    '3d': 'translate3d'
  );

  $transform-properties: _concat(_keys($transform-properties-map),
    'scale',
    'scaleX',
    'scaleY',
    'rotate',
    'skew');

  @if _includes($transform-properties, $property) {
    $property: if(map-has-key($transform-properties-map, $property),
      map-get($transform-properties-map, $property),
      $property);

    $node: _set($node, 'property', $property);
    $node: _set($node, 'transform', true);
  }

  @return $node;
}

@function m-set-node-transform-properties($node, $index, $nodes) {
  $node: _set($node, 'transform', (_get($node, 'property'): _get($node, 'value')));

  @return $node;
}

@function m-get-default-transform-values($property, $args...) {
  $default-transform-values: (
    'translate': 0,
    'translate3d': (0, 0, 0),
    'translateX': 0,
    'translateY': 0,
    'translateZ': 0,
    'scale': 1,
    'scaleX': 1,
    'scaleY': 1,
    'scaleZ': 1,
    'rotate': 0,
    'rotate3d': (1, 1, 1, 0),
    'rotateX': 0,
    'rotateY': 0,
    'rotateZ': 0,
    'skew': (0, 0),
    'skewX': 0,
    'skewY': 0,
    'matrix': (1, 0, 0, 1, 0, 0),
    'matrix3d': (1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
  );

  @return _result($default-transform-values, $property, 0);
}

@function m-set-default-transform-values($node, $args...) {
  $properties: __this('properties');

  $default-transform-map: _zip-map($properties, _map($properties, m-get-default-transform-values));
  
  $transform: _defaults(_get($node, 'transform'), $default-transform-map);

  @return _set($node, 'transform', $transform);
}

@function m-persist-transform-values($node, $index, $nodes) {
  @if $index == 1 {
    @return $node;
  }

  $previous-node: _get($nodes, $index - 1);

  $node: _modify($node, 'transform', _defaults _get($previous-node, 'transform'));

  @return $node;
}

@function m-parenthesize($value, $args...) {
  @return unquote('(#{$value})');
}

@function m-concatenate-transform-values($node, $args...) {
  $node: _modify($node, 'transform', _
    (_map-values m-parenthesize)
    (_pairs)
    (_map (_reduce _str-concat))
    (_join ' '));

  $node: _set($node, 'property', 'transform');
  $node: _set($node, 'value', unquote(_get($node, 'transform')));

  $node: map-remove($node, 'transform');

  @return $node;
}

@function m-aggregate-transform-properties($nodes, $args...) {
  $nodes: _map($nodes, m-set-node-transform-properties);

  $transform: _assign(_pluck($nodes, 'transform')...);

  $node: _($nodes, _first, _set 'transform' $transform);

  @return $node;
}

@function m-combine-transforms($nodes, $args...) {
  $transform-nodes: _filter($nodes, 'transform');
  $non-transform-nodes: _reject($nodes, 'transform');

  $transform-properties: _($transform-nodes,
    _pluck 'property',
    _map unquote,
    _unique);

  $transform-nodes: _($transform-nodes,
    _group-by 'offset',
    _map _bind(m-aggregate-transform-properties),
    _map m-persist-transform-values,
    _map _bind(m-set-default-transform-values, ('properties': $transform-properties)),
    _map m-concatenate-transform-values);

  $nodes: _concat($transform-nodes, $non-transform-nodes);

  @debug $nodes;

  @return $nodes;
}

@function m-calculate-value($node, $index, $nodes) {
  @if ($index == 1) {
    $_: _static-set('previous-node', $node);

    @return $node;
  }

  $previous-node: _static-get('previous-node');
  $value: _get($node, 'value');

  $operators: (
    '+=',
    '-=',
    '\\+',
    '\\-',
    '\\=',
    '*=',
    '\\*'
  );

  $operator: _find($operators, _ary(_partial(_starts-with, $value)));

  @if $operator {
    $value: _parse-float(str-slice($value, str-length($operator) + 1));
    $previous-value: _get($previous-node, 'value');

    @if $operator == '+=' or $operator == '\\+' {
      $value: _add($value, $previous-value);
    } @else if $operator == '-=' or $operator == '\\-' {
      $value: _add(-$value, $previous-value);
    } @else if $operator == '*=' or $operator == '\\*' {
      @debug $value, $previous-value;
      $value: $value * $previous-value;
    } @else if $operator == '\\=' {
      $value: $previous-value;
    }

    $node: _set($node, 'value', $value);
  }

  $_: _static-set('previous-node', $node);

  @return $node;
}

@function m-calculate-values($nodes, $args...) {
  $nodes: _($nodes,
    _group-by 'property',
    _map (_map m-calculate-value),
    _flatten);

  @return $nodes;
}

